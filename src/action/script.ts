import OpenAI from "openai";

interface VideoScene {
  imagePrompt: string;
  contentText: string;
}

interface ScriptResponse {
  content: VideoScene[];
}

const openAi = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * Generates a video script with image prompts using OpenAI
 * @param prompt - User's video topic/description
 * @returns Promise<ScriptResponse | null> - Parsed JSON object with content array or null on error
 */

export const generateScript = async (
  prompt: string
): Promise<ScriptResponse | null> => {
  // console.log("generateScript called with prompt:", prompt);
  try {
    if (!prompt || typeof prompt !== "string") {
      throw new Error("Invalid prompt");
    }

    if (!process.env.OPENAI_API_KEY) {
      throw new Error("OPENAI_API_KEY is not set");
    }

    const systemPrompt = `You are a professional video script writer. Generate scripts optimized for short-form video content with realistic, detailed image prompts.`;

    const userPrompt = `Create a 30-second video script on: "${prompt}"

CRITICAL REQUIREMENTS:
- Generate exactly 3-5 scenes (each 6-10 seconds)
- Each scene MUST have:
  * imagePrompt: Highly detailed, realistic description for AI image generation
  * contentText: Engaging, concise narration (2-3 sentences max per scene)
- Maintain consistent tone and story flow
- Image prompts should be visually descriptive and camera-aware

JSON STRUCTURE (return ONLY this):
{
  "content": [
    {
      "imagePrompt": "detailed description",
      "contentText": "narration text"
    }
  ]
}

Do not include any explanatory text, markdown, or content outside the JSON.`;

    // --- OPENAI API CALL ---
    const response = await openAi.chat.completions.create({
      model: "gpt-4.1",
      messages: [
        {
          role: "system",
          content: systemPrompt,
        },
        {
          role: "user",
          content: userPrompt,
        },
      ],
      response_format: {
        type: "json_object",
      },
      temperature: 0.2,
      max_tokens: 1000,
    });

    const content = response.choices[0].message.content;

    if (!content) {
      throw new Error("No content generated by OpenAI");
    }

    // --- VALIDATE JSON STRUCTURE ---
    try {
      // Parse the JSON string into an object
      const parsed = JSON.parse(content);

      if (!parsed.content || !Array.isArray(parsed.content)) {
        throw new Error("Invalid JSON structure returned");
      }

      return parsed as ScriptResponse;
    } catch (parseError) {
      console.error("Failed to parse OpenAI response:", parseError);
      throw new Error("Invalid JSON response from OpenAI");
    }
  } catch (error) {
    console.error("Error in generateScript:", {
      error: error instanceof Error ? error.message : error,
      prompt,
      timestamp: new Date().toISOString(),
    });

    return null;
  }
};
